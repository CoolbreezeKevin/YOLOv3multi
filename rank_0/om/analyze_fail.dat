# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] construct_wrapper.1
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(432)/    def construct(self, x):/
funcgraph fg_1(
        %para1 : Tensor(F32)[1, 3, 1024, 1024]    # x
        , %para2 : Ref[Tensor(F32)][1, 32, 1, 1]    # unetup.final_conv.weight
        , %para3 : Ref[Tensor(F32)][21]    # feature_map.backblock0.conv6.bias
        , %para4 : Ref[Tensor(F32)][21, 1024, 1, 1]    # feature_map.backblock0.conv6.weight
        , %para5 : Ref[Tensor(F32)][21]    # feature_map.backblock1.conv6.bias
        , %para6 : Ref[Tensor(F32)][21, 512, 1, 1]    # feature_map.backblock1.conv6.weight
        , %para7 : Ref[Tensor(F32)][21]    # feature_map.backblock2.conv6.bias
        , %para8 : Ref[Tensor(F32)][21, 256, 1, 1]    # feature_map.backblock2.conv6.weight
        , %para9 : Ref[Tensor(F32)][2048, 1024, 2, 2]    # unetup.ups.0.weight
        , %para10 : Ref[Tensor(F32)][1024, 512, 2, 2]    # unetup.ups.2.weight
        , %para11 : Ref[Tensor(F32)][512, 256, 2, 2]    # unetup.ups.4.weight
        , %para12 : Ref[Tensor(F32)][256, 128, 2, 2]    # unetup.ups.6.weight
        , %para13 : Ref[Tensor(F32)][128, 64, 2, 2]    # unetup.ups.8.weight
        , %para14 : Ref[Tensor(F32)][64, 32, 2, 2]    # unetup.ups.10.weight
        , %para15 : Ref[Tensor(F32)][2048, 1024, 3, 3]    # unetup.bottleneck.conv.0.weight
        , %para16 : Ref[Tensor(F32)][2048, 2048, 3, 3]    # unetup.bottleneck.conv.3.weight
        , %para17 : Ref[Tensor(F32)][32, 3, 3, 3]    # feature_map.backbone.conv0.0.weight
        , %para18 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backblock0.conv4.0.weight
        , %para19 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backblock1.conv4.0.weight
        , %para20 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backblock2.conv4.0.weight
        , %para21 : Ref[Tensor(F32)][64, 32, 3, 3]    # feature_map.backbone.conv1.0.weight
        , %para22 : Ref[Tensor(F32)][128, 64, 3, 3]    # feature_map.backbone.conv2.0.weight
        , %para23 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.conv3.0.weight
        , %para24 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.conv4.0.weight
        , %para25 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backbone.conv5.0.weight
        , %para26 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backblock0.conv3.0.weight
        , %para27 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backblock0.conv5.0.weight
        , %para28 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backblock1.conv3.0.weight
        , %para29 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backblock1.conv5.0.weight
        , %para30 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.conv1.0.weight
        , %para31 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backblock2.conv3.0.weight
        , %para32 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backblock2.conv5.0.weight
        , %para33 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.conv2.0.weight
        , %para34 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.1.gamma
        , %para35 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.1.beta
        , %para36 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.1.moving_mean
        , %para37 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.1.moving_variance
        , %para38 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.4.gamma
        , %para39 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.4.beta
        , %para40 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.4.moving_mean
        , %para41 : Ref[Tensor(F32)][2048]    # unetup.bottleneck.conv.4.moving_variance
        , %para42 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backblock0.conv2.0.weight
        , %para43 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backblock1.conv2.0.weight
        , %para44 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backblock2.conv2.0.weight
        , %para45 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backblock0.conv1.0.weight
        , %para46 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backblock1.conv1.0.weight
        , %para47 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backblock2.conv1.0.weight
        , %para48 : Ref[Tensor(F32)][32]    # feature_map.backbone.conv0.1.gamma
        , %para49 : Ref[Tensor(F32)][32]    # feature_map.backbone.conv0.1.beta
        , %para50 : Ref[Tensor(F32)][32]    # feature_map.backbone.conv0.1.moving_mean
        , %para51 : Ref[Tensor(F32)][32]    # feature_map.backbone.conv0.1.moving_variance
        , %para52 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv4.1.gamma
        , %para53 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv4.1.beta
        , %para54 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv4.1.moving_mean
        , %para55 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv4.1.moving_variance
        , %para56 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backblock0.conv0.0.weight
        , %para57 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv4.1.gamma
        , %para58 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv4.1.beta
        , %para59 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv4.1.moving_mean
        , %para60 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv4.1.moving_variance
        , %para61 : Ref[Tensor(F32)][256, 768, 1, 1]    # feature_map.backblock1.conv0.0.weight
        , %para62 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv4.1.gamma
        , %para63 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv4.1.beta
        , %para64 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv4.1.moving_mean
        , %para65 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv4.1.moving_variance
        , %para66 : Ref[Tensor(F32)][128, 384, 1, 1]    # feature_map.backblock2.conv0.0.weight
        , %para67 : Ref[Tensor(F32)][64]    # feature_map.backbone.conv1.1.gamma
        , %para68 : Ref[Tensor(F32)][64]    # feature_map.backbone.conv1.1.beta
        , %para69 : Ref[Tensor(F32)][64]    # feature_map.backbone.conv1.1.moving_mean
        , %para70 : Ref[Tensor(F32)][64]    # feature_map.backbone.conv1.1.moving_variance
        , %para71 : Ref[Tensor(F32)][128]    # feature_map.backbone.conv2.1.gamma
        , %para72 : Ref[Tensor(F32)][128]    # feature_map.backbone.conv2.1.beta
        , %para73 : Ref[Tensor(F32)][128]    # feature_map.backbone.conv2.1.moving_mean
        , %para74 : Ref[Tensor(F32)][128]    # feature_map.backbone.conv2.1.moving_variance
        , %para75 : Ref[Tensor(F32)][256]    # feature_map.backbone.conv3.1.gamma
        , %para76 : Ref[Tensor(F32)][256]    # feature_map.backbone.conv3.1.beta
        , %para77 : Ref[Tensor(F32)][256]    # feature_map.backbone.conv3.1.moving_mean
        , %para78 : Ref[Tensor(F32)][256]    # feature_map.backbone.conv3.1.moving_variance
        , %para79 : Ref[Tensor(F32)][512]    # feature_map.backbone.conv4.1.gamma
        , %para80 : Ref[Tensor(F32)][512]    # feature_map.backbone.conv4.1.beta
        , %para81 : Ref[Tensor(F32)][512]    # feature_map.backbone.conv4.1.moving_mean
        , %para82 : Ref[Tensor(F32)][512]    # feature_map.backbone.conv4.1.moving_variance
        , %para83 : Ref[Tensor(F32)][1024]    # feature_map.backbone.conv5.1.gamma
        , %para84 : Ref[Tensor(F32)][1024]    # feature_map.backbone.conv5.1.beta
        , %para85 : Ref[Tensor(F32)][1024]    # feature_map.backbone.conv5.1.moving_mean
        , %para86 : Ref[Tensor(F32)][1024]    # feature_map.backbone.conv5.1.moving_variance
        , %para87 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv3.1.gamma
        , %para88 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv3.1.beta
        , %para89 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv3.1.moving_mean
        , %para90 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv3.1.moving_variance
        , %para91 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv5.1.gamma
        , %para92 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv5.1.beta
        , %para93 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv5.1.moving_mean
        , %para94 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv5.1.moving_variance
        , %para95 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv3.1.gamma
        , %para96 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv3.1.beta
        , %para97 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv3.1.moving_mean
        , %para98 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv3.1.moving_variance
        , %para99 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv5.1.gamma
        , %para100 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv5.1.beta
        , %para101 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv5.1.moving_mean
        , %para102 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv5.1.moving_variance
        , %para103 : Ref[Tensor(F32)][256]    # feature_map.conv1.1.gamma
        , %para104 : Ref[Tensor(F32)][256]    # feature_map.conv1.1.beta
        , %para105 : Ref[Tensor(F32)][256]    # feature_map.conv1.1.moving_mean
        , %para106 : Ref[Tensor(F32)][256]    # feature_map.conv1.1.moving_variance
        , %para107 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv3.1.gamma
        , %para108 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv3.1.beta
        , %para109 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv3.1.moving_mean
        , %para110 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv3.1.moving_variance
        , %para111 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv5.1.gamma
        , %para112 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv5.1.beta
        , %para113 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv5.1.moving_mean
        , %para114 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv5.1.moving_variance
        , %para115 : Ref[Tensor(F32)][128]    # feature_map.conv2.1.gamma
        , %para116 : Ref[Tensor(F32)][128]    # feature_map.conv2.1.beta
        , %para117 : Ref[Tensor(F32)][128]    # feature_map.conv2.1.moving_mean
        , %para118 : Ref[Tensor(F32)][128]    # feature_map.conv2.1.moving_variance
        , %para119 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv2.1.gamma
        , %para120 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv2.1.beta
        , %para121 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv2.1.moving_mean
        , %para122 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv2.1.moving_variance
        , %para123 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv2.1.gamma
        , %para124 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv2.1.beta
        , %para125 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv2.1.moving_mean
        , %para126 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv2.1.moving_variance
        , %para127 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv2.1.gamma
        , %para128 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv2.1.beta
        , %para129 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv2.1.moving_mean
        , %para130 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv2.1.moving_variance
        , %para131 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv1.1.gamma
        , %para132 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv1.1.beta
        , %para133 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv1.1.moving_mean
        , %para134 : Ref[Tensor(F32)][1024]    # feature_map.backblock0.conv1.1.moving_variance
        , %para135 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv1.1.gamma
        , %para136 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv1.1.beta
        , %para137 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv1.1.moving_mean
        , %para138 : Ref[Tensor(F32)][512]    # feature_map.backblock1.conv1.1.moving_variance
        , %para139 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv1.1.gamma
        , %para140 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv1.1.beta
        , %para141 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv1.1.moving_mean
        , %para142 : Ref[Tensor(F32)][256]    # feature_map.backblock2.conv1.1.moving_variance
        , %para143 : Ref[Tensor(F32)][1024, 2048, 3, 3]    # unetup.ups.1.conv.0.weight
        , %para144 : Ref[Tensor(F32)][1024, 1024, 3, 3]    # unetup.ups.1.conv.3.weight
        , %para145 : Ref[Tensor(F32)][512, 1024, 3, 3]    # unetup.ups.3.conv.0.weight
        , %para146 : Ref[Tensor(F32)][512, 512, 3, 3]    # unetup.ups.3.conv.3.weight
        , %para147 : Ref[Tensor(F32)][256, 512, 3, 3]    # unetup.ups.5.conv.0.weight
        , %para148 : Ref[Tensor(F32)][256, 256, 3, 3]    # unetup.ups.5.conv.3.weight
        , %para149 : Ref[Tensor(F32)][128, 256, 3, 3]    # unetup.ups.7.conv.0.weight
        , %para150 : Ref[Tensor(F32)][128, 128, 3, 3]    # unetup.ups.7.conv.3.weight
        , %para151 : Ref[Tensor(F32)][64, 128, 3, 3]    # unetup.ups.9.conv.0.weight
        , %para152 : Ref[Tensor(F32)][64, 64, 3, 3]    # unetup.ups.9.conv.3.weight
        , %para153 : Ref[Tensor(F32)][32, 64, 3, 3]    # unetup.ups.11.conv.0.weight
        , %para154 : Ref[Tensor(F32)][32, 32, 3, 3]    # unetup.ups.11.conv.3.weight
        , %para155 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv0.1.gamma
        , %para156 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv0.1.beta
        , %para157 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv0.1.moving_mean
        , %para158 : Ref[Tensor(F32)][512]    # feature_map.backblock0.conv0.1.moving_variance
        , %para159 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv0.1.gamma
        , %para160 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv0.1.beta
        , %para161 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv0.1.moving_mean
        , %para162 : Ref[Tensor(F32)][256]    # feature_map.backblock1.conv0.1.moving_variance
        , %para163 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv0.1.gamma
        , %para164 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv0.1.beta
        , %para165 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv0.1.moving_mean
        , %para166 : Ref[Tensor(F32)][128]    # feature_map.backblock2.conv0.1.moving_variance
        , %para167 : Ref[Tensor(F32)][64, 32, 3, 3]    # feature_map.backbone.layer1.0.conv2.0.weight
        , %para168 : Ref[Tensor(F32)][128, 64, 3, 3]    # feature_map.backbone.layer2.0.conv2.0.weight
        , %para169 : Ref[Tensor(F32)][128, 64, 3, 3]    # feature_map.backbone.layer2.1.conv2.0.weight
        , %para170 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.0.conv2.0.weight
        , %para171 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.1.conv2.0.weight
        , %para172 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.2.conv2.0.weight
        , %para173 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.3.conv2.0.weight
        , %para174 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.4.conv2.0.weight
        , %para175 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.5.conv2.0.weight
        , %para176 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.6.conv2.0.weight
        , %para177 : Ref[Tensor(F32)][256, 128, 3, 3]    # feature_map.backbone.layer3.7.conv2.0.weight
        , %para178 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.0.conv2.0.weight
        , %para179 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.1.conv2.0.weight
        , %para180 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.2.conv2.0.weight
        , %para181 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.3.conv2.0.weight
        , %para182 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.4.conv2.0.weight
        , %para183 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.5.conv2.0.weight
        , %para184 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.6.conv2.0.weight
        , %para185 : Ref[Tensor(F32)][512, 256, 3, 3]    # feature_map.backbone.layer4.7.conv2.0.weight
        , %para186 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backbone.layer5.0.conv2.0.weight
        , %para187 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backbone.layer5.1.conv2.0.weight
        , %para188 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backbone.layer5.2.conv2.0.weight
        , %para189 : Ref[Tensor(F32)][1024, 512, 3, 3]    # feature_map.backbone.layer5.3.conv2.0.weight
        , %para190 : Ref[Tensor(F32)][32, 64, 1, 1]    # feature_map.backbone.layer1.0.conv1.0.weight
        , %para191 : Ref[Tensor(F32)][64, 128, 1, 1]    # feature_map.backbone.layer2.0.conv1.0.weight
        , %para192 : Ref[Tensor(F32)][64, 128, 1, 1]    # feature_map.backbone.layer2.1.conv1.0.weight
        , %para193 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.0.conv1.0.weight
        , %para194 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.1.conv1.0.weight
        , %para195 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.2.conv1.0.weight
        , %para196 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.3.conv1.0.weight
        , %para197 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.4.conv1.0.weight
        , %para198 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.5.conv1.0.weight
        , %para199 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.6.conv1.0.weight
        , %para200 : Ref[Tensor(F32)][128, 256, 1, 1]    # feature_map.backbone.layer3.7.conv1.0.weight
        , %para201 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.0.conv1.0.weight
        , %para202 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.1.conv1.0.weight
        , %para203 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.2.conv1.0.weight
        , %para204 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.3.conv1.0.weight
        , %para205 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.4.conv1.0.weight
        , %para206 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.5.conv1.0.weight
        , %para207 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.6.conv1.0.weight
        , %para208 : Ref[Tensor(F32)][256, 512, 1, 1]    # feature_map.backbone.layer4.7.conv1.0.weight
        , %para209 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backbone.layer5.0.conv1.0.weight
        , %para210 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backbone.layer5.1.conv1.0.weight
        , %para211 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backbone.layer5.2.conv1.0.weight
        , %para212 : Ref[Tensor(F32)][512, 1024, 1, 1]    # feature_map.backbone.layer5.3.conv1.0.weight
        , %para213 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.1.gamma
        , %para214 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.1.beta
        , %para215 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.1.moving_mean
        , %para216 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.1.moving_variance
        , %para217 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.4.gamma
        , %para218 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.4.beta
        , %para219 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.4.moving_mean
        , %para220 : Ref[Tensor(F32)][1024]    # unetup.ups.1.conv.4.moving_variance
        , %para221 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.1.gamma
        , %para222 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.1.beta
        , %para223 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.1.moving_mean
        , %para224 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.1.moving_variance
        , %para225 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.4.gamma
        , %para226 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.4.beta
        , %para227 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.4.moving_mean
        , %para228 : Ref[Tensor(F32)][512]    # unetup.ups.3.conv.4.moving_variance
        , %para229 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.1.gamma
        , %para230 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.1.beta
        , %para231 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.1.moving_mean
        , %para232 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.1.moving_variance
        , %para233 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.4.gamma
        , %para234 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.4.beta
        , %para235 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.4.moving_mean
        , %para236 : Ref[Tensor(F32)][256]    # unetup.ups.5.conv.4.moving_variance
        , %para237 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.1.gamma
        , %para238 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.1.beta
        , %para239 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.1.moving_mean
        , %para240 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.1.moving_variance
        , %para241 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.4.gamma
        , %para242 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.4.beta
        , %para243 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.4.moving_mean
        , %para244 : Ref[Tensor(F32)][128]    # unetup.ups.7.conv.4.moving_variance
        , %para245 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.1.gamma
        , %para246 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.1.beta
        , %para247 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.1.moving_mean
        , %para248 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.1.moving_variance
        , %para249 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.4.gamma
        , %para250 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.4.beta
        , %para251 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.4.moving_mean
        , %para252 : Ref[Tensor(F32)][64]    # unetup.ups.9.conv.4.moving_variance
        , %para253 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.1.gamma
        , %para254 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.1.beta
        , %para255 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.1.moving_mean
        , %para256 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.1.moving_variance
        , %para257 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.4.gamma
        , %para258 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.4.beta
        , %para259 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.4.moving_mean
        , %para260 : Ref[Tensor(F32)][32]    # unetup.ups.11.conv.4.moving_variance
        , %para261 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer1.0.conv2.1.gamma
        , %para262 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer1.0.conv2.1.beta
        , %para263 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer1.0.conv2.1.moving_mean
        , %para264 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer1.0.conv2.1.moving_variance
        , %para265 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.0.conv2.1.gamma
        , %para266 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.0.conv2.1.beta
        , %para267 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.0.conv2.1.moving_mean
        , %para268 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.0.conv2.1.moving_variance
        , %para269 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.1.conv2.1.gamma
        , %para270 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.1.conv2.1.beta
        , %para271 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.1.conv2.1.moving_mean
        , %para272 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer2.1.conv2.1.moving_variance
        , %para273 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.0.conv2.1.gamma
        , %para274 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.0.conv2.1.beta
        , %para275 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.0.conv2.1.moving_mean
        , %para276 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.0.conv2.1.moving_variance
        , %para277 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.1.conv2.1.gamma
        , %para278 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.1.conv2.1.beta
        , %para279 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.1.conv2.1.moving_mean
        , %para280 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.1.conv2.1.moving_variance
        , %para281 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.2.conv2.1.gamma
        , %para282 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.2.conv2.1.beta
        , %para283 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.2.conv2.1.moving_mean
        , %para284 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.2.conv2.1.moving_variance
        , %para285 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.3.conv2.1.gamma
        , %para286 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.3.conv2.1.beta
        , %para287 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.3.conv2.1.moving_mean
        , %para288 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.3.conv2.1.moving_variance
        , %para289 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.4.conv2.1.gamma
        , %para290 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.4.conv2.1.beta
        , %para291 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.4.conv2.1.moving_mean
        , %para292 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.4.conv2.1.moving_variance
        , %para293 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.5.conv2.1.gamma
        , %para294 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.5.conv2.1.beta
        , %para295 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.5.conv2.1.moving_mean
        , %para296 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.5.conv2.1.moving_variance
        , %para297 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.6.conv2.1.gamma
        , %para298 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.6.conv2.1.beta
        , %para299 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.6.conv2.1.moving_mean
        , %para300 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.6.conv2.1.moving_variance
        , %para301 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.7.conv2.1.gamma
        , %para302 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.7.conv2.1.beta
        , %para303 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.7.conv2.1.moving_mean
        , %para304 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer3.7.conv2.1.moving_variance
        , %para305 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.0.conv2.1.gamma
        , %para306 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.0.conv2.1.beta
        , %para307 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.0.conv2.1.moving_mean
        , %para308 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.0.conv2.1.moving_variance
        , %para309 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.1.conv2.1.gamma
        , %para310 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.1.conv2.1.beta
        , %para311 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.1.conv2.1.moving_mean
        , %para312 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.1.conv2.1.moving_variance
        , %para313 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.2.conv2.1.gamma
        , %para314 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.2.conv2.1.beta
        , %para315 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.2.conv2.1.moving_mean
        , %para316 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.2.conv2.1.moving_variance
        , %para317 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.3.conv2.1.gamma
        , %para318 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.3.conv2.1.beta
        , %para319 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.3.conv2.1.moving_mean
        , %para320 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.3.conv2.1.moving_variance
        , %para321 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.4.conv2.1.gamma
        , %para322 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.4.conv2.1.beta
        , %para323 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.4.conv2.1.moving_mean
        , %para324 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.4.conv2.1.moving_variance
        , %para325 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.5.conv2.1.gamma
        , %para326 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.5.conv2.1.beta
        , %para327 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.5.conv2.1.moving_mean
        , %para328 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.5.conv2.1.moving_variance
        , %para329 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.6.conv2.1.gamma
        , %para330 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.6.conv2.1.beta
        , %para331 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.6.conv2.1.moving_mean
        , %para332 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.6.conv2.1.moving_variance
        , %para333 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.7.conv2.1.gamma
        , %para334 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.7.conv2.1.beta
        , %para335 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.7.conv2.1.moving_mean
        , %para336 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer4.7.conv2.1.moving_variance
        , %para337 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.0.conv2.1.gamma
        , %para338 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.0.conv2.1.beta
        , %para339 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.0.conv2.1.moving_mean
        , %para340 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.0.conv2.1.moving_variance
        , %para341 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.1.conv2.1.gamma
        , %para342 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.1.conv2.1.beta
        , %para343 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.1.conv2.1.moving_mean
        , %para344 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.1.conv2.1.moving_variance
        , %para345 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.2.conv2.1.gamma
        , %para346 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.2.conv2.1.beta
        , %para347 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.2.conv2.1.moving_mean
        , %para348 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.2.conv2.1.moving_variance
        , %para349 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.3.conv2.1.gamma
        , %para350 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.3.conv2.1.beta
        , %para351 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.3.conv2.1.moving_mean
        , %para352 : Ref[Tensor(F32)][1024]    # feature_map.backbone.layer5.3.conv2.1.moving_variance
        , %para353 : Ref[Tensor(F32)][32]    # feature_map.backbone.layer1.0.conv1.1.gamma
        , %para354 : Ref[Tensor(F32)][32]    # feature_map.backbone.layer1.0.conv1.1.beta
        , %para355 : Ref[Tensor(F32)][32]    # feature_map.backbone.layer1.0.conv1.1.moving_mean
        , %para356 : Ref[Tensor(F32)][32]    # feature_map.backbone.layer1.0.conv1.1.moving_variance
        , %para357 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.0.conv1.1.gamma
        , %para358 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.0.conv1.1.beta
        , %para359 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.0.conv1.1.moving_mean
        , %para360 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.0.conv1.1.moving_variance
        , %para361 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.1.conv1.1.gamma
        , %para362 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.1.conv1.1.beta
        , %para363 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.1.conv1.1.moving_mean
        , %para364 : Ref[Tensor(F32)][64]    # feature_map.backbone.layer2.1.conv1.1.moving_variance
        , %para365 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.0.conv1.1.gamma
        , %para366 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.0.conv1.1.beta
        , %para367 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.0.conv1.1.moving_mean
        , %para368 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.0.conv1.1.moving_variance
        , %para369 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.1.conv1.1.gamma
        , %para370 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.1.conv1.1.beta
        , %para371 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.1.conv1.1.moving_mean
        , %para372 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.1.conv1.1.moving_variance
        , %para373 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.2.conv1.1.gamma
        , %para374 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.2.conv1.1.beta
        , %para375 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.2.conv1.1.moving_mean
        , %para376 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.2.conv1.1.moving_variance
        , %para377 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.3.conv1.1.gamma
        , %para378 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.3.conv1.1.beta
        , %para379 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.3.conv1.1.moving_mean
        , %para380 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.3.conv1.1.moving_variance
        , %para381 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.4.conv1.1.gamma
        , %para382 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.4.conv1.1.beta
        , %para383 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.4.conv1.1.moving_mean
        , %para384 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.4.conv1.1.moving_variance
        , %para385 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.5.conv1.1.gamma
        , %para386 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.5.conv1.1.beta
        , %para387 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.5.conv1.1.moving_mean
        , %para388 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.5.conv1.1.moving_variance
        , %para389 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.6.conv1.1.gamma
        , %para390 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.6.conv1.1.beta
        , %para391 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.6.conv1.1.moving_mean
        , %para392 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.6.conv1.1.moving_variance
        , %para393 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.7.conv1.1.gamma
        , %para394 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.7.conv1.1.beta
        , %para395 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.7.conv1.1.moving_mean
        , %para396 : Ref[Tensor(F32)][128]    # feature_map.backbone.layer3.7.conv1.1.moving_variance
        , %para397 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.0.conv1.1.gamma
        , %para398 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.0.conv1.1.beta
        , %para399 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.0.conv1.1.moving_mean
        , %para400 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.0.conv1.1.moving_variance
        , %para401 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.1.conv1.1.gamma
        , %para402 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.1.conv1.1.beta
        , %para403 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.1.conv1.1.moving_mean
        , %para404 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.1.conv1.1.moving_variance
        , %para405 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.2.conv1.1.gamma
        , %para406 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.2.conv1.1.beta
        , %para407 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.2.conv1.1.moving_mean
        , %para408 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.2.conv1.1.moving_variance
        , %para409 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.3.conv1.1.gamma
        , %para410 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.3.conv1.1.beta
        , %para411 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.3.conv1.1.moving_mean
        , %para412 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.3.conv1.1.moving_variance
        , %para413 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.4.conv1.1.gamma
        , %para414 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.4.conv1.1.beta
        , %para415 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.4.conv1.1.moving_mean
        , %para416 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.4.conv1.1.moving_variance
        , %para417 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.5.conv1.1.gamma
        , %para418 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.5.conv1.1.beta
        , %para419 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.5.conv1.1.moving_mean
        , %para420 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.5.conv1.1.moving_variance
        , %para421 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.6.conv1.1.gamma
        , %para422 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.6.conv1.1.beta
        , %para423 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.6.conv1.1.moving_mean
        , %para424 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.6.conv1.1.moving_variance
        , %para425 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.7.conv1.1.gamma
        , %para426 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.7.conv1.1.beta
        , %para427 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.7.conv1.1.moving_mean
        , %para428 : Ref[Tensor(F32)][256]    # feature_map.backbone.layer4.7.conv1.1.moving_variance
        , %para429 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.0.conv1.1.gamma
        , %para430 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.0.conv1.1.beta
        , %para431 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.0.conv1.1.moving_mean
        , %para432 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.0.conv1.1.moving_variance
        , %para433 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.1.conv1.1.gamma
        , %para434 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.1.conv1.1.beta
        , %para435 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.1.conv1.1.moving_mean
        , %para436 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.1.conv1.1.moving_variance
        , %para437 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.2.conv1.1.gamma
        , %para438 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.2.conv1.1.beta
        , %para439 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.2.conv1.1.moving_mean
        , %para440 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.2.conv1.1.moving_variance
        , %para441 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.3.conv1.1.gamma
        , %para442 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.3.conv1.1.beta
        , %para443 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.3.conv1.1.moving_mean
        , %para444 : Ref[Tensor(F32)][512]    # feature_map.backbone.layer5.3.conv1.1.moving_variance
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_64(%para1)    #(Tensor(F32)[1, 3, 1024, 1024])    # fg_64=construct.64 #scope: Default
#[CNode]72
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]73
}
# order:
#   1: construct_wrapper.1:[CNode]72{[0]: ValueNode<FuncGraph> construct.64, [1]: x}
#   2: construct_wrapper.1:[CNode]73{[0]: ValueNode<Primitive> Return, [1]: [CNode]72}


# [No.2] construct.64
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(432)/    def construct(self, x):/
funcgraph fg_64[fg_1](
        %para445 : Tensor(F32)[1, 3, 1024, 1024]    # x
    ) {
    %1 : Bool = DoSignaturePrimitive::S-Prim-logical_not{prim_type=1}(Bool(1))    #(Bool) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]74
    %2 : Bool = FuncGraph::fg_75(%1)    #(Bool)    # fg_75=bool_.75 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]76
    %3 : Func = Primitive::Switch{prim_type=1}(%2, FuncGraph::fg_77, FuncGraph::fg_65)    #(Bool, Func, Func)    # fg_77=✓construct.77, fg_65=✗construct.65 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]78

#------------------------> 1
    %4 = %3() #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]79
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]80
}
# order:
#   1: construct.64:[CNode]81{[0]: ValueNode<FuncGraph> shape.82, [1]: x}
#   2: construct.64:[CNode]83{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<Int64Imm> 2, [2]: ValueNode<Int64Imm> 4, [3]: ValueNode<None> None}
#   3: construct.64:input_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]81, [2]: [CNode]83}
#   4: construct.64:[CNode]84{[0]: ValueNode<DoSignaturePrimitive> S-Prim-TupleToArray, [1]: input_shape}
#   5: construct.64:input_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Cast, [1]: [CNode]84, [2]: ValueNode<Float> Float32}
#   6: construct.64:[CNode]85{[0]: ValueNode<FuncGraph> construct.86, [1]: x}
#   7: construct.64:big_object_output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]85, [2]: ValueNode<Int64Imm> 0}
#   8: construct.64:medium_object_output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]85, [2]: ValueNode<Int64Imm> 1}
#   9: construct.64:small_object_output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]85, [2]: ValueNode<Int64Imm> 2}
#  10: construct.64:features{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]85, [2]: ValueNode<Int64Imm> 3}
#  11: construct.64:seg_road{[0]: ValueNode<FuncGraph> construct.67, [1]: features}
#  12: construct.64:[CNode]74{[0]: ValueNode<DoSignaturePrimitive> S-Prim-logical_not, [1]: ValueNode<BoolImm> true}
#  13: construct.64:[CNode]76{[0]: ValueNode<FuncGraph> bool_.75, [1]: [CNode]74}
#  14: construct.64:[CNode]78{[0]: ValueNode<Primitive> Switch, [1]: [CNode]76, [2]: ValueNode<FuncGraph> ✓construct.77, [3]: ValueNode<FuncGraph> ✗construct.65}
#  15: construct.64:[CNode]79{[0]: [CNode]78}
#  16: construct.64:[CNode]80{[0]: ValueNode<Primitive> Return, [1]: [CNode]79}


# [No.3] ✗construct.65
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/
funcgraph fg_65[fg_64](
) {

#------------------------> 2
    %1 = FuncGraph::fg_66()    # fg_66=↓construct.66 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]87
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/#[CNode]88
}
# order:
#   1: ✗construct.65:[CNode]87{[0]: ValueNode<FuncGraph> ↓construct.66}
#   2: ✗construct.65:[CNode]88{[0]: ValueNode<Primitive> Return, [1]: [CNode]87}


# [No.4] ↓construct.66
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(445)/        if not self.keep_detect:/
funcgraph fg_66[fg_64](
) {
    %1 : $(construct.64):Tuple[Tensor(F32)*3,List[Tensor(F32)*6]] = FuncGraph::fg_86(%para445)    #(Tensor(F32)[1, 3, 1024, 1024])    # fg_86=construct.86 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(441)/        big_object_output, medium_object_output, small_object_output, features = self.feature_map(x)/#[CNode]85
    %2 : $(construct.64):Tensor(F32)[1, 21, 32, 32] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(0))    #(Tuple[Tensor(F32)*3,List[Tensor(F32)*6]], I64) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(441)/        big_object_output, medium_object_output, small_object_output, features = self.feature_map(x)/#big_object_output
    %3 : $(construct.64):Tuple[I64*4] = FuncGraph::fg_82(%para445)    #(Tensor(F32)[1, 3, 1024, 1024])    # fg_82=shape.82 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(439)/        input_shape = ops.shape(x)[2:4]/#[CNode]81
    %4 : $(construct.64):Slice[Int64 : Int64 : None] = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(I64(2), I64(4), None)    #(I64, I64, NoneType) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(439)/        input_shape = ops.shape(x)[2:4]/#[CNode]83
    %5 : $(construct.64):Tuple[I64*2] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%3, %4)    #(Tuple[I64*4], Slice[Int64 : Int64 : None]) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(439)/        input_shape = ops.shape(x)[2:4]/#input_shape
    %6 : $(construct.64):Tensor(I32)[2] = DoSignaturePrimitive::S-Prim-TupleToArray{prim_type=1}(%5)    #(Tuple[I64*2]) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(440)/        input_shape = ops.cast(self.tenser_to_array(input_shape), ms.float32)/#[CNode]84
    %7 : $(construct.64):Tensor(F32)[2] = DoSignaturePrimitive::S-Prim-Cast{prim_type=1}[output_names=["output"], input_names=["x", "dst_type"], SrcT=I32, DstT=F32, dst_type=F32](%6, F32)    #(Tensor(I32)[2], TypeType) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(440)/        input_shape = ops.cast(self.tenser_to_array(input_shape), ms.float32)/#input_shape
    %8 = FuncGraph::fg_89(%2, %7)    #(Tensor(F32)[1, 21, 32, 32], Tensor(F32)[2])    # fg_89=construct.89 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(447)/        output_big = self.detect_1(big_object_output, input_shape)/#output_big
    %9 : $(construct.64):Tensor(F32)[1, 21, 64, 64] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(1))    #(Tuple[Tensor(F32)*3,List[Tensor(F32)*6]], I64) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(441)/        big_object_output, medium_object_output, small_object_output, features = self.feature_map(x)/#medium_object_output
    %10 = FuncGraph::fg_90(%9, %7)    #(Tensor(F32)[1, 21, 64, 64], Tensor(F32)[2])    # fg_90=construct.90 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(448)/        output_me = self.detect_2(medium_object_output, input_shape)/#output_me
    %11 : $(construct.64):Tensor(F32)[1, 21, 128, 128] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(2))    #(Tuple[Tensor(F32)*3,List[Tensor(F32)*6]], I64) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(441)/        big_object_output, medium_object_output, small_object_output, features = self.feature_map(x)/#small_object_output
    %12 = FuncGraph::fg_91(%11, %7)    #(Tensor(F32)[1, 21, 128, 128], Tensor(F32)[2])    # fg_91=construct.91 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(449)/        output_small = self.detect_3(small_object_output, input_shape)/#output_small
    %13 : $(construct.64):List[Tensor(F32)*6] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(3))    #(Tuple[Tensor(F32)*3,List[Tensor(F32)*6]], I64) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(441)/        big_object_output, medium_object_output, small_object_output, features = self.feature_map(x)/#features

#------------------------> 3
    %14 = $(construct.64):FuncGraph::fg_67(%13)    #(List[Tensor(F32)*6])    # fg_67=construct.67 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(442)/        seg_road = self.unetup(features)/#seg_road
    %15 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%8, %10, %12, %14)    #(Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(451)/        return output_big, output_me, output_small, seg_road/#[CNode]92
    Primitive::Return{prim_type=1}(%15)    #(Undefined) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(451)/        return output_big, output_me, output_small, seg_road/#[CNode]93
}
# order:
#   1: ↓construct.66:output_big{[0]: ValueNode<FuncGraph> construct.89, [1]: big_object_output, [2]: input_shape}
#   2: ↓construct.66:output_me{[0]: ValueNode<FuncGraph> construct.90, [1]: medium_object_output, [2]: input_shape}
#   3: ↓construct.66:output_small{[0]: ValueNode<FuncGraph> construct.91, [1]: small_object_output, [2]: input_shape}
#   4: ↓construct.66:[CNode]92{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: output_big, [2]: output_me, [3]: output_small, [4]: seg_road}
#   5: ↓construct.66:[CNode]93{[0]: ValueNode<Primitive> Return, [1]: [CNode]92}


# [No.5] construct.67
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(77)/    def construct(self, features):/
funcgraph fg_67[fg_1](
        %para446 : List[Tensor(F32)*6]    # skip_connections
    ) {
    %1 : I64 = DoSignaturePrimitive::S-Prim-negative{prim_type=1}(I64(1))    #(I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(80)/        x=self.bottleneck(features[-1])/#[CNode]94
    %2 : Tensor(F32)[1, 1024, 32, 32] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para446, %1)    #(List[Tensor(F32)*6], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(80)/        x=self.bottleneck(features[-1])/#[CNode]95
    %3 : Tensor(F32)[1, 2048, 32, 32] = FuncGraph::fg_96(%2)    #(Tensor(F32)[1, 1024, 32, 32])    # fg_96=construct.96 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(80)/        x=self.bottleneck(features[-1])/#x

#------------------------> 4
    %4 = FuncGraph::fg_68(I64(0), %3)    #(I64, Tensor(F32)[1, 2048, 32, 32])    # fg_68=⤾construct.68 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]97
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]98
}
# order:
#   1: construct.67:[CNode]94{[0]: ValueNode<DoSignaturePrimitive> S-Prim-negative, [1]: ValueNode<Int64Imm> 1}
#   2: construct.67:[CNode]95{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: skip_connections, [2]: [CNode]94}
#   3: construct.67:x{[0]: ValueNode<FuncGraph> construct.96, [1]: [CNode]95}
#   4: construct.67:[CNode]99{[0]: ValueNode<DoSignaturePrimitive> S-Prim-negative, [1]: ValueNode<Int64Imm> 1}
#   5: construct.67:[CNode]100{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: [CNode]99}
#   6: construct.67:Φskip_connections{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: skip_connections, [2]: [CNode]100}
#   7: construct.67:[CNode]101{[0]: ValueNode<FuncGraph> ms_len.39, [1]: ValueNode<ValueList> [32, 64, 128, 256, 512, 1024]}
#   8: construct.67:[CNode]102{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: ValueNode<Int64Imm> 2, [2]: [CNode]101}
#   9: construct.67:[CNode]103{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_range, [1]: ValueNode<Int64Imm> 0, [2]: [CNode]102, [3]: ValueNode<Int64Imm> 2}
#  10: construct.67:[CNode]104{[0]: ValueNode<FuncGraph> ms_len.39, [1]: [CNode]103}
#  11: construct.67:[CNode]97{[0]: ValueNode<FuncGraph> ⤾construct.68, [1]: ValueNode<Int64Imm> 0, [2]: x}
#  12: construct.67:[CNode]98{[0]: ValueNode<Primitive> Return, [1]: [CNode]97}


# [No.6] ⤾construct.68
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/
funcgraph fg_68[fg_67](
        %para447 : I64    # @[CNode]69
        , %para448 : Tensor(F32)[1, 2048, 32, 32]    # Φx
    ) {
    %1 : $(construct.67):I64 = FuncGraph::fg_39([I64(32), I64(64), I64(128), I64(256), I64(512), I64(1024)])    #(List[I64*6])    # fg_39=ms_len.39 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]101
    %2 : $(construct.67):I64 = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(I64(2), %1)    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]102
    %3 : $(construct.67):Tuple[I64*6] = DoSignaturePrimitive::S-Prim-make_range{prim_type=1}(I64(0), %2, I64(2))    #(I64, I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]103
    %4 : $(construct.67):I64 = FuncGraph::fg_39(%3)    #(Tuple[I64*6])    # fg_39=ms_len.39 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]104
    %5 : Bool = MultitypeFuncGraph::less{(Tensor, Number), (Number, Tensor), (Tensor, Tensor), (Number, Number)}(%para447, %4)    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]105
    %6 : Func = Primitive::Switch{prim_type=1}(%5, FuncGraph::fg_70, FuncGraph::fg_106)    #(Bool, Func, Func)    # fg_70=⥁construct.70, fg_106=↓construct.106 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]107

#------------------------> 5
    %7 = %6() #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]108
    Primitive::Return{prim_type=1}(%7)    #(Undefined) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]109
}
# order:
#   1: ⤾construct.68:[CNode]105{[0]: ValueNode<MultitypeFuncGraph> less.41, [1]: @[CNode]69, [2]: [CNode]104}
#   2: ⤾construct.68:[CNode]107{[0]: ValueNode<Primitive> Switch, [1]: [CNode]105, [2]: ValueNode<FuncGraph> ⥁construct.70, [3]: ValueNode<FuncGraph> ↓construct.106}
#   3: ⤾construct.68:[CNode]108{[0]: [CNode]107}
#   4: ⤾construct.68:[CNode]109{[0]: ValueNode<Primitive> Return, [1]: [CNode]108}


# [No.7] ⥁construct.70
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/
funcgraph fg_70[fg_68](
) {
    %1 : I64 = MultitypeFuncGraph::add{(RowTensor, Tensor), (NoneType, NoneType), (Tensor, Tensor), (List, List), (Tuple, Tuple), (Tensor, List), (Tensor, Tuple), (List, Tensor), (Tuple, Tensor), (Tensor, Number), (Number, Tensor), (String, String), (Number, Number)}(%para447, I64(1))    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]69
    %2 : I64 = Primitive::stop_gradient{prim_type=1}(%1)    #(I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(442)/        seg_road = self.unetup(features)/#[CNode]110
    %3 : Tuple[Func*12] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_111, FuncGraph::fg_112, FuncGraph::fg_113, FuncGraph::fg_114, FuncGraph::fg_115, FuncGraph::fg_116, FuncGraph::fg_117, FuncGraph::fg_118, FuncGraph::fg_119, FuncGraph::fg_120, FuncGraph::fg_121, FuncGraph::fg_122)    #(Func, Func, Func, Func, Func, Func, Func, Func, Func, Func, Func, Func)    # fg_111=construct.111, fg_112=construct.112, fg_113=construct.113, fg_114=construct.114, fg_115=construct.115, fg_116=construct.116, fg_117=construct.117, fg_118=construct.118, fg_119=construct.119, fg_120=construct.120, fg_121=construct.121, fg_122=construct.122 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(86)/            x=self.ups[idx](x)/#[CNode]123
    %4 : $(construct.67):I64 = FuncGraph::fg_39([I64(32), I64(64), I64(128), I64(256), I64(512), I64(1024)])    #(List[I64*6])    # fg_39=ms_len.39 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]101
    %5 : $(construct.67):I64 = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(I64(2), %4)    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]102
    %6 : $(construct.67):Tuple[I64*6] = DoSignaturePrimitive::S-Prim-make_range{prim_type=1}(I64(0), %5, I64(2))    #(I64, I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]103
    %7 : I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, %para447)    #(Tuple[I64*6], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(96)/            x=self.ups[idx+1](concat_skip)/#Φidx
    %8 : Func = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%3, %7)    #(Tuple[Func*12], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(86)/            x=self.ups[idx](x)/#[CNode]124
    %9 : Tensor(F32)[1, 1024, 64, 64] = %8(%para448)    #(Tensor(F32)[1, 2048, 32, 32]) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(86)/            x=self.ups[idx](x)/#x
    %10 : Tuple[I64*4] = FuncGraph::fg_82(%9)    #(Tensor(F32)[1, 1024, 64, 64])    # fg_82=shape.82 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]125
    %11 : $(construct.67):I64 = DoSignaturePrimitive::S-Prim-negative{prim_type=1}(I64(1))    #(I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(81)/        skip_connections = skip_connections[::-1]/#[CNode]99
    %12 : $(construct.67):Slice[None : None : Int64] = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, %11)    #(NoneType, NoneType, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(81)/        skip_connections = skip_connections[::-1]/#[CNode]100
    %13 : $(construct.67):List[Tensor(F32)*6] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para446, %12)    #(List[Tensor(F32)*6], Slice[None : None : Int64]) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#Φskip_connections
    %14 : I64 = DoSignaturePrimitive::S-Prim-floordiv{prim_type=1}(%7, I64(2))    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(87)/            skip_connection=skip_connections[idx//2]/#[CNode]126
    %15 : Tensor(F32)[1, 1024, 32, 32] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%13, %14)    #(List[Tensor(F32)*6], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(95)/            concat_skip=self.concat((skip_connection,x))/#Φskip_connection
    %16 : Tuple[I64*4] = FuncGraph::fg_82(%15)    #(Tensor(F32)[1, 1024, 32, 32])    # fg_82=shape.82 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]127
    %17 : Bool = DoSignaturePrimitive::S-Prim-not_equal{prim_type=1}(%10, %16)    #(Tuple[I64*4], Tuple[I64*4]) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]128
    %18 : Bool = FuncGraph::fg_75(%17)    #(Bool)    # fg_75=bool_.75 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]129
    %19 : Func = Primitive::Switch{prim_type=1}(%18, FuncGraph::fg_130, FuncGraph::fg_131)    #(Bool, Func, Func)    # fg_130=✓⥁construct.130, fg_131=✗⥁construct.131 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]132
    %20 : Tensor(F32)[1, 1024, 64, 64] = %19() #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]133

#------------------------> 6
    %21 = FuncGraph::fg_71(%20)    #(Tensor(F32)[1, 1024, 64, 64])    # fg_71=↓⥁construct.71 #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(442)/        seg_road = self.unetup(features)/#[CNode]134
    %22 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%21, %2)    #(Undefined, I64) #scope: Default
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(442)/        seg_road = self.unetup(features)/#[CNode]135
    Primitive::Return{prim_type=1}(%22)    #(Undefined) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/#[CNode]136
}
# order:
#   1: ⥁construct.70:Φidx{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]103, [2]: @[CNode]69}
#   2: ⥁construct.70:[CNode]69{[0]: ValueNode<MultitypeFuncGraph> add.38, [1]: @[CNode]69, [2]: ValueNode<Int64Imm> 1}
#   3: ⥁construct.70:[CNode]124{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]123, [2]: Φidx}
#   4: ⥁construct.70:x{[0]: [CNode]124, [1]: Φx}
#   5: ⥁construct.70:[CNode]126{[0]: ValueNode<DoSignaturePrimitive> S-Prim-floordiv, [1]: Φidx, [2]: ValueNode<Int64Imm> 2}
#   6: ⥁construct.70:Φskip_connection{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: Φskip_connections, [2]: [CNode]126}
#   7: ⥁construct.70:[CNode]125{[0]: ValueNode<FuncGraph> shape.82, [1]: x}
#   8: ⥁construct.70:[CNode]127{[0]: ValueNode<FuncGraph> shape.82, [1]: Φskip_connection}
#   9: ⥁construct.70:[CNode]128{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: [CNode]125, [2]: [CNode]127}
#  10: ⥁construct.70:[CNode]129{[0]: ValueNode<FuncGraph> bool_.75, [1]: [CNode]128}
#  11: ⥁construct.70:[CNode]132{[0]: ValueNode<Primitive> Switch, [1]: [CNode]129, [2]: ValueNode<FuncGraph> ✓⥁construct.130, [3]: ValueNode<FuncGraph> ✗⥁construct.131}
#  12: ⥁construct.70:[CNode]133{[0]: [CNode]132}
#  13: ⥁construct.70:[CNode]134{[0]: ValueNode<FuncGraph> ↓⥁construct.71, [1]: [CNode]133}
#  14: ⥁construct.70:[CNode]135{[0]: ValueNode<Primitive> Depend, [1]: [CNode]134, [2]: [CNode]110}
#  15: ⥁construct.70:[CNode]136{[0]: ValueNode<Primitive> Return, [1]: [CNode]135}


# [No.8] ↓⥁construct.71
# In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(92)/            if ops.shape(x)!=ops.shape(skip_connection):/
funcgraph fg_71[fg_70](
        %para449 : Tensor(F32)[1, 1024, 64, 64]    # Φx
    ) {
    %1 : $(⥁construct.70):I64 = MultitypeFuncGraph::add{(RowTensor, Tensor), (NoneType, NoneType), (Tensor, Tensor), (List, List), (Tuple, Tuple), (Tensor, List), (Tensor, Tuple), (List, Tensor), (Tuple, Tensor), (Tensor, Number), (Number, Tensor), (String, String), (Number, Number)}(%para447, I64(1))    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]69
    %2 : Tuple[Func*12] = Primitive::MakeTuple{prim_type=1}(FuncGraph::fg_111, FuncGraph::fg_112, FuncGraph::fg_113, FuncGraph::fg_114, FuncGraph::fg_115, FuncGraph::fg_116, FuncGraph::fg_117, FuncGraph::fg_118, FuncGraph::fg_119, FuncGraph::fg_120, FuncGraph::fg_121, FuncGraph::fg_122)    #(Func, Func, Func, Func, Func, Func, Func, Func, Func, Func, Func, Func)    # fg_111=construct.111, fg_112=construct.112, fg_113=construct.113, fg_114=construct.114, fg_115=construct.115, fg_116=construct.116, fg_117=construct.117, fg_118=construct.118, fg_119=construct.119, fg_120=construct.120, fg_121=construct.121, fg_122=construct.122 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(96)/            x=self.ups[idx+1](concat_skip)/#[CNode]137
    %3 : $(construct.67):I64 = FuncGraph::fg_39([I64(32), I64(64), I64(128), I64(256), I64(512), I64(1024)])    #(List[I64*6])    # fg_39=ms_len.39 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]101
    %4 : $(construct.67):I64 = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(I64(2), %3)    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]102
    %5 : $(construct.67):Tuple[I64*6] = DoSignaturePrimitive::S-Prim-make_range{prim_type=1}(I64(0), %4, I64(2))    #(I64, I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]103
    %6 : $(⥁construct.70):I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%5, %para447)    #(Tuple[I64*6], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(96)/            x=self.ups[idx+1](concat_skip)/#Φidx
    %7 : I64 = DoSignaturePrimitive::S-Prim-add{prim_type=1}(%6, I64(1))    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(96)/            x=self.ups[idx+1](concat_skip)/#[CNode]138
    %8 : Func = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%2, %7)    #(Tuple[Func*12], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(96)/            x=self.ups[idx+1](concat_skip)/#[CNode]139
    %9 : $(construct.67):I64 = DoSignaturePrimitive::S-Prim-negative{prim_type=1}(I64(1))    #(I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(81)/        skip_connections = skip_connections[::-1]/#[CNode]99
    %10 : $(construct.67):Slice[None : None : Int64] = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, %9)    #(NoneType, NoneType, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(81)/        skip_connections = skip_connections[::-1]/#[CNode]100
    %11 : $(construct.67):List[Tensor(F32)*6] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para446, %10)    #(List[Tensor(F32)*6], Slice[None : None : Int64]) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#Φskip_connections
    %12 : $(⥁construct.70):I64 = DoSignaturePrimitive::S-Prim-floordiv{prim_type=1}(%6, I64(2))    #(I64, I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(87)/            skip_connection=skip_connections[idx//2]/#[CNode]126
    %13 : $(⥁construct.70):Tensor(F32)[1, 1024, 32, 32] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%11, %12)    #(List[Tensor(F32)*6], I64) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(95)/            concat_skip=self.concat((skip_connection,x))/#Φskip_connection
    %14 : Tuple[Tensor(F32)*2] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%13, %para449)    #(Tensor(F32)[1, 1024, 32, 32], Tensor(F32)[1, 1024, 64, 64]) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(95)/            concat_skip=self.concat((skip_connection,x))/#[CNode]140

#------------------------> 7
    %15 = DoSignaturePrimitive::S-Prim-Concat{prim_type=1}[axis=I64(1), N=I64(2), inputNums=I64(2)](%14)    #(Tuple[Tensor(F32)*2]) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(95)/            concat_skip=self.concat((skip_connection,x))/#concat_skip
    %16 = %8(%15)    #(Undefined) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(96)/            x=self.ups[idx+1](concat_skip)/#x
    %17 = FuncGraph::fg_68(%1, %16)    #(I64, Undefined)    # fg_68=⤾construct.68 #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]141
    Primitive::Return{prim_type=1}(%17)    #(Undefined) #scope: Default/unetup-UnetUppHead
      # In file /home/luck/models/official/cv/yolov3_darknet53/src/yolo.py(85)/        for idx in range(0,2*len(self.features),2):/#[CNode]142
}
# order:
#   1: ↓⥁construct.71:[CNode]140{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: Φskip_connection, [2]: Φx}
#   2: ↓⥁construct.71:concat_skip{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Concat, [1]: [CNode]140}
#   3: ↓⥁construct.71:[CNode]138{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: Φidx, [2]: ValueNode<Int64Imm> 1}
#   4: ↓⥁construct.71:[CNode]139{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]137, [2]: [CNode]138}
#   5: ↓⥁construct.71:x{[0]: [CNode]139, [1]: concat_skip}
#   6: ↓⥁construct.71:[CNode]141{[0]: ValueNode<FuncGraph> ⤾construct.68, [1]: [CNode]69, [2]: x}
#   7: ↓⥁construct.71:[CNode]142{[0]: ValueNode<Primitive> Return, [1]: [CNode]141}


#===============================================================================
# num of function graphs in stack: 8/9 (Ignored 1 internal frames).
